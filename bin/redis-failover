#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var version = require('../package.json').version;

var Watcher = require('../lib/watcher_manager');
var logger = require('log4js');

program
  .version(version)
  .usage('-n 127.0.0.1:6379,127.0.0.1:6479 -z 172.17.5.72:2381,172.17.5.73:2381,172.17.5.74:2381')
  .option('-n, --nodes <nodes>', 'Comma-separated redis host:port pairs')
  .option('-z, --zk-servers <servers>', 'Comma-separated ZooKeeper host:port pairs')
  .option('-p, --password [password]', 'Redis password')
  .option('-c, --config [path]', 'Path to JSON config file')
  .option('-l, --log [path]', 'The log file path')
  .option('--zk-chroot [rootpath]', 'Path to ZooKeepers chroot')
  .option('--zk-username [username]', 'ZooKeepers username')
  .option('--zk-password [password]', 'ZooKeepers password')
  .option('--pid [path]', 'pid file')
  .parse(process.argv);


if (program.config) {
  var content = fs.readFileSync(program.config, 'utf8');
  var conf = JSON.parse(content);
  program = conf;
}

if (!program.nodes) {
  console.error('error: redis nodes can not be empty!');
  return;
}

if (!program.zkServers) {
  console.error('error: zkservers can not be empty!');
  return;
}

var opts = {
  redisServers  : program.nodes,
  redisPassword : program.password,
  zkServers     : program.zkServers,
  zkChroot      : program.zkChroot,
  zkUsername    : program.zkUsername,
  zkPassword    : program.zkPassword,
  pingTimeout   : program.pingTimeout,
  pingInterval  : program.pingInterval,
  maxFailures   : program.maxFailures,
  pidFile       : program.pid
};

if (program.log) {
  // if log is a dir path
  if (program.log.match(/\/$/)) {
    program.log = program.log + 'redis-failover-' + process.pid + '.log';
  }

  logger.configure({
    appenders: [
      {type: 'console'},
      {type: 'file', filename: program.log, maxLogSize: 300 * 1024 * 1024, backups: 1}
    ],
    replaceConsole: true
  });
}

if (opts.pidFile) {
  fs.writeFileSync(opts.pidFile, process.pid);
}

logger.getLogger().info('start options: ', opts);

new Watcher(opts);


// vim: set ft=javascript
